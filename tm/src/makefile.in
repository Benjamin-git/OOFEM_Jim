# $Header: /home/cvs/bp/oofem/tm/src/makefile.in,v 1.3.4.2 2004/04/08 11:39:25 bp Exp $ 

.SUFFIXES:  .h .C

SHELL      = /bin/sh

PETSC_DIR  = @PETSC_DIR@
PETSC_ARCH = @PETSC_ARCH@
BOPT       = @PETSC_BOPT@
@PETSC_MAKE_INCLUDE@

#
INCLUDE_DIR= @OOFEMLIB_INCLUDES@ @IML_INCLUDES@ @SPOOLES_INCLUDES@ @PETSC_INCLUDES@
GRAPHICS_INCLUDE_DIR= @CKIT_INCLUDES@ @ELIXIR_INCLUDES@
PARALLEL_INCLUDE_DIR= @MPI_INCLUDES@
PARALLEL_SYMBOLS    = @MPI_MODULE_SYMBOLS@
LOCAL_LIBSG= @ELIXIR_LIBS@ @CKIT_LIB@
SYS_LIBSG  = @X_PRE_LIBS@ @X_LIBS@ @X_EXTRA_LIBS@
SYS_LIBS   = @LIBS@
#
#Compiler flags
#OPTFLAGS used only for non-debug version
#CFLAGS     = -64 -exceptions -prelink -ptused  #required on SGI
CFLAGS        = @MODULE_SYMBOLS@
RELEASE_FLAGS = -O -Wall @CXXFLAGS@
DEBUG_FLAGS   = -g -Wall @CXXFLAGS@  #recomended on Linux
OOFEG_FLAGS   = @OOFEG_DIRECTIVES@
#DEBUG_FLAGS   = -g 
# LINUX, GNU
LD         = @CXX@
CC         = @CXX@
SLD        = @SERIAL_CXX@
SCC        = @SERIAL_CXX@
PLD        = @MPI_CXX@
PCC        = @MPI_CXX@
#
#
PROGRAM    = @TARGETS@
RM         = rm -f
AR         = ar -r
ARCHIVE    = OOFEM

# For large systems, it is often desirable to put sources in a separate
# directory from the binaries.  The "directory search" features of `make'
# facilitate this by searching several directories automatically to find
# a prerequisite.  When you redistribute the files among directories, you
# do not need to change the individual rules, just the search paths.
# The value of the `make' variable `VPATH' specifies a list of
# directories that `make' should search.  Most often, the directories are
# expected to contain prerequisite files that are not in the current
# directory; however, `VPATH' specifies a search list that `make' applies
# for all files, including files which are targets of rules.
#
# Example:
#
# VPATH = .:../mysources

#
# You probably don't need to change anything below here.
#

#######################################################################
#


TMLIB_OOFEM_OBJ_PATH  = ../oofem_obj
TMLIB_OOFEG_OBJ_PATH  = ../oofeg_obj
TMLIB_POOFEM_OBJ_PATH = ../poofem_obj

##
## source files
##

srcs0= stationarytransportproblem.C nonstationarytransportproblem.C  nltransienttransportproblem.C staggeredproblem.C

srcs1= transportelement.C

srcs2= quad1_ht.C tr1_ht.C quadaxisym1_ht.C traxisym1_ht.C brick1_ht.C tetrah1_ht.C

srcs3= transportmaterial.C isoheatmat.C hemotkmat.C

srcs4= hydratingisoheatmat.C hydratinghemomat.C

srcs5= 

srcs6= 

srcs7= 

srcs8= 

srcs9=
#<RESTRICTED_SECTION>
srcs9= 
#</RESTRICTED_SECTION>

# sources included only in parallel version
psrc1= 


all_src = $(srcs0) $(srcs1) $(srcs2) $(srcs3) $(srcs4) $(srcs5) $(srcs6) $(srcs7) $(srcs8) $(srcs9) $(psrc1) 
oofem_src = $(srcs0) $(srcs1) $(srcs2) $(srcs3) $(srcs4) $(srcs5) $(srcs6) $(srcs7) $(srcs8) $(srcs9)
oofeg_src = $(srcs0) $(srcs1) $(srcs2) $(srcs3) $(srcs4) $(srcs5) $(srcs6) $(srcs7) $(srcs8) $(srcs9)
poofem_src = $(srcs0) $(srcs1) $(srcs2) $(srcs3) $(srcs4) $(srcs5) $(srcs6) $(srcs7) $(srcs8) $(srcs9) $(psrc1) 


##
## object files
##
oofem_objs := $(oofem_src:.C=.o)
oofeg_objs := $(oofeg_src:.C=.o)
poofem_objs := $(poofem_src:.C=.o)

tmlib_oofem_Release_objs := $(foreach obj,$(oofem_objs),$(TMLIB_OOFEM_OBJ_PATH)/Release/$(obj))
tmlib_oofem_Debug_objs   := $(foreach obj,$(oofem_objs),$(TMLIB_OOFEM_OBJ_PATH)/Debug/$(obj))

tmlib_oofeg_Release_objs := $(foreach obj,$(oofeg_objs),$(TMLIB_OOFEG_OBJ_PATH)/Release/$(obj))
tmlib_oofeg_Debug_objs   := $(foreach obj,$(oofeg_objs),$(TMLIB_OOFEG_OBJ_PATH)/Debug/$(obj))

tmlib_poofem_Release_objs := $(foreach obj,$(poofem_objs),$(TMLIB_POOFEM_OBJ_PATH)/Release/$(obj))
tmlib_poofem_Debug_objs   := $(foreach obj,$(poofem_objs),$(TMLIB_POOFEM_OBJ_PATH)/Debug/$(obj))

all:: $(PROGRAM) 

oofem-release: tmlib-oofem-release
oofem-debug: tmlib-oofem-debug
oofeg-release: tmlib-oofeg-release
oofeg-debug: tmlib-oofeg-debug
poofem-release: tmlib-poofem-release
poofem-debug: tmlib-poofem-debug

$(TMLIB_OOFEM_OBJ_PATH)/Release/%.o:	%.C
	@if [ ! -d $(TMLIB_OOFEM_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_OOFEM_OBJ_PATH)/Release; fi
	$(CC) -c $(INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $< -o $@

$(TMLIB_OOFEM_OBJ_PATH)/Release/%.o:	%.c
	@if [ ! -d $(TMLIB_OOFEM_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_OOFEM_OBJ_PATH)/Release; fi
	$(CC) -c $(INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $< -o $@

$(TMLIB_OOFEM_OBJ_PATH)/Debug/%.o:	%.C
	@if [ ! -d $(TMLIB_OOFEM_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_OOFEM_OBJ_PATH)/Debug; fi
	$(CC) -c $(INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $< -o $@

$(TMLIB_OOFEM_OBJ_PATH)/Debug/%.o:	%.c
	@if [ ! -d $(TMLIB_OOFEM_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_OOFEM_OBJ_PATH)/Debug; fi
	$(CC) -c $(INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $< -o $@

$(TMLIB_OOFEG_OBJ_PATH)/Release/%.o:	%.C
	@if [ ! -d $(TMLIB_OOFEG_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_OOFEG_OBJ_PATH)/Release; fi
	$(CC) -c -D__OOFEG $(OOFEG_FLAGS) $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $< -o $@

$(TMLIB_OOFEG_OBJ_PATH)/Release/%.o:	%.c
	@if [ ! -d $(TMLIB_OOFEG_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_OOFEG_OBJ_PATH)/Release; fi
	$(CC) -c -D__OOFEG $(OOFEG_FLAGS) $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $< -o $@

$(TMLIB_OOFEG_OBJ_PATH)/Debug/%.o:	%.C
	@if [ ! -d $(TMLIB_OOFEG_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_OOFEG_OBJ_PATH)/Debug; fi
	$(CC) -c -D__OOFEG $(OOFEG_FLAGS) $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $< -o $@

$(TMLIB_OOFEG_OBJ_PATH)/Debug/%.o:	%.c
	@if [ ! -d $(TMLIB_OOFEG_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_OOFEG_OBJ_PATH)/Debug; fi
	$(CC) -c -D__OOFEG $(OOFEG_FLAGS) $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $< -o $@

$(TMLIB_POOFEM_OBJ_PATH)/Release/%.o:	%.C
	@if [ ! -d $(TMLIB_POOFEM_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_POOFEM_OBJ_PATH)/Release; fi
	$(PCC) -c -D__PARALLEL_MODE $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $(PARALLEL_SYMBOLS)  $< -o $@

$(TMLIB_POOFEM_OBJ_PATH)/Release/%.o:	%.c
	@if [ ! -d $(TMLIB_POOFEM_OBJ_PATH)/Release ]; then mkdir -p $(TMLIB_POOFEM_OBJ_PATH)/Release; fi
	$(PCC) -c -D__PARALLEL_MODE $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $(CFLAGS) $(RELEASE_FLAGS) $(PARALLEL_SYMBOLS)  $< -o $@

$(TMLIB_POOFEM_OBJ_PATH)/Debug/%.o:	%.C
	@if [ ! -d $(TMLIB_POOFEM_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_POOFEM_OBJ_PATH)/Debug; fi
	$(PCC) -c -D__PARALLEL_MODE $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $(PARALLEL_SYMBOLS)  $< -o $@

$(TMLIB_POOFEM_OBJ_PATH)/Debug/%.o:	%.c
	@if [ ! -d $(TMLIB_POOFEM_OBJ_PATH)/Debug ]; then mkdir -p $(TMLIB_POOFEM_OBJ_PATH)/Debug; fi
	$(PCC) -c -D__PARALLEL_MODE $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $(CFLAGS) $(DEBUG_FLAGS) $(PARALLEL_SYMBOLS)  $< -o $@

#
# local targets
#
tmlib-oofem-release: $(TMLIB_OOFEM_OBJ_PATH)/Release/tmlib.a
tmlib-oofem-debug: $(TMLIB_OOFEM_OBJ_PATH)/Debug/tmlib.a
tmlib-oofeg-release: $(TMLIB_OOFEG_OBJ_PATH)/Release/tmlib.a
tmlib-oofeg-debug: $(TMLIB_OOFEG_OBJ_PATH)/Debug/tmlib.a
tmlib-poofem-release: $(TMLIB_POOFEM_OBJ_PATH)/Release/tmlib.a
tmlib-poofem-debug: $(TMLIB_POOFEM_OBJ_PATH)/Debug/tmlib.a

$(TMLIB_OOFEM_OBJ_PATH)/Release/tmlib.a: $(tmlib_oofem_Release_objs)
	rm -f $(TMLIB_OOFEM_OBJ_PATH)/Release/tmlib.a
	@echo $(AR) $(TMLIB_OOFEM_OBJ_PATH)/Release/tmlib.a 
	@$(AR) $(TMLIB_OOFEM_OBJ_PATH)/Release/tmlib.a $(tmlib_oofem_Release_objs)	

$(TMLIB_OOFEM_OBJ_PATH)/Debug/tmlib.a:  $(tmlib_oofem_Debug_objs) 
	rm -f $(TMLIB_OOFEM_OBJ_PATH)/Debug/tmlib.a
	@echo $(AR) $(TMLIB_OOFEM_OBJ_PATH)/Debug/tmlib.a
	@$(AR) $(TMLIB_OOFEM_OBJ_PATH)/Debug/tmlib.a $(tmlib_oofem_Debug_objs)

$(TMLIB_OOFEG_OBJ_PATH)/Release/tmlib.a: $(tmlib_oofeg_Release_objs)
	rm -f $(TMLIB_OOFEG_OBJ_PATH)/Release/tmlib.a
	@echo $(AR) $(TMLIB_OOFEG_OBJ_PATH)/Release/tmlib.a 
	@$(AR) $(TMLIB_OOFEG_OBJ_PATH)/Release/tmlib.a $(tmlib_oofeg_Release_objs)

$(TMLIB_OOFEG_OBJ_PATH)/Debug/tmlib.a: $(tmlib_oofeg_Debug_objs)
	rm -f $(TMLIB_OOFEG_OBJ_PATH)/Debug/tmlib.a
	@echo $(AR) $(TMLIB_OOFEG_OBJ_PATH)/Debug/tmlib.a 
	@$(AR) $(TMLIB_OOFEG_OBJ_PATH)/Debug/tmlib.a $(tmlib_oofeg_Debug_objs)

$(TMLIB_POOFEM_OBJ_PATH)/Release/tmlib.a:  $(tmlib_poofem_Release_objs)
	rm -f $(TMLIB_POOFEM_OBJ_PATH)/Release/tmlib.a
	@echo $(AR) $(TMLIB_POOFEM_OBJ_PATH)/Release/tmlib.a 
	@$(AR) $(TMLIB_POOFEM_OBJ_PATH)/Release/tmlib.a $(tmlib_poofem_Release_objs)

$(TMLIB_POOFEM_OBJ_PATH)/Debug/tmlib.a:  $(tmlib_poofem_Debug_objs)
	rm -f $(TMLIB_POOFEM_OBJ_PATH)/Debug/tmlib.a
	@echo $(AR) $(TMLIB_POOFEM_OBJ_PATH)/Debug/tmlib.a
	@$(AR) $(TMLIB_POOFEM_OBJ_PATH)/Debug/tmlib.a $(tmlib_poofem_Debug_objs)

clean: clean-oofem clean-oofeg clean-poofem

clean-oofem:
	rm -fr $(TMLIB_OOFEM_OBJ_PATH)

clean-oofeg:
	rm -fr $(TMLIB_OOFEG_OBJ_PATH)

clean-poofem:
	rm -fr $(TMLIB_POOFEM_OBJ_PATH)

#Split to multiple targets in order to have dependency on particular set of sources.
#this allows to use substitution macro $^ and allows to support VPATH settings
makedepend :  makedepend_oofem makedepend_oofeg makedepend_poofem

makedepend_oofem : $(oofem_src)
	makedepend -D__MAKEDEPEND -p$(TMLIB_OOFEM_OBJ_PATH)/Release/  $(INCLUDE_DIR) $^
	makedepend -D__MAKEDEPEND -p$(TMLIB_OOFEM_OBJ_PATH)/Debug/    $(INCLUDE_DIR) $^ -a

makedepend_oofeg : $(oofeg_src)
	makedepend -D__MAKEDEPEND -p$(TMLIB_OOFEG_OBJ_PATH)/Release/ -D__OOFEG  $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $^  -a
	makedepend -D__MAKEDEPEND -p$(TMLIB_OOFEG_OBJ_PATH)/Debug/ -D__OOFEG  $(INCLUDE_DIR) $(GRAPHICS_INCLUDE_DIR) $^  -a

makedepend_poofem : $(poofem_src)
	makedepend -D__MAKEDEPEND -p$(TMLIB_POOFEM_OBJ_PATH)/Release/ -D__PARALLEL_MODE  $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $^ -a
	makedepend -D__MAKEDEPEND -p$(TMLIB_POOFEM_OBJ_PATH)/Debug/ -D__PARALLEL_MODE  $(INCLUDE_DIR) $(PARALLEL_INCLUDE_DIR) $^ -a
